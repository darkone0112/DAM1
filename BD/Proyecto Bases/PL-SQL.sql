/* Procedimientos */
/* Procedimiento que agrega un director */
CREATE OR REPLACE PROCEDURE DIRECTADD
    (V_NUMDIR IN TDIRECT.NUMDIR%TYPE,
    V_NOMBRE IN TDIRECT.NOMBRE%TYPE, V_DIRECCION IN TDIRECT.DIRECCION%TYPE,
    V_FECNA IN TDIRECT.FECNA%TYPE, V_TITULAR IN TDIRECT.TITULAR%TYPE)
    IS
    BEGIN
        INSERT INTO TDIRECT VALUES(V_NUMDIR,V_NOMBRE,V_DIRECCION,V_FECNA,V_TITULAR);
    END DIRECTADD;

    DECLARE
    V_NUMDIR TDIRECT.NUMDIR%TYPE:=&V_NUMDIR;
    V_NOMBRE TDIRECT.NOMBRE%TYPE :=&V_NOMBRE;
    V_DIRECCION TDIRECT.DIRECCION%TYPE :=&V_DIRECCION;
    V_FECNA TDIRECT.FECNA%TYPE :=&V_FECNA;
    V_TITULAR TDIRECT.TITULAR%TYPE :=&V_TITULAR;
    V_COD TDIRECT.NUMDIR%TYPE;
    BEGIN
        SELECT MAX(TDIRECT.NUMDIR)+1 INTO V_COD FROM TDIRECT;
        DIRECTADD(V_COD,V_NOMBRE,V_DIRECCION,V_FECNA,V_TITULAR);
    END;
    select * from TDIRECT;
    ROLLBACK;

    /* PROCEDIMIENTO PARA SABER SI UN DIRECTOR ES INVITADO O TITULAR */
    DROP PROCEDURE OBRACOMPO;
    CREATE OR REPLACE PROCEDURE OBRACOMPO
    AS
        CURSOR C1 IS
        SELECT *
        FROM TDIRECT X;
        REGISTRO C1%ROWTYPE;
    BEGIN
        OPEN C1;
        FETCH C1 INTO REGISTRO;
        WHILE(C1%FOUND) LOOP
        /* IF REGISTRO.NUMDIR=1  THEN */
            /* DBMS_OUTPUT.PUT_LINE('SI'); */
        /* END IF; */
            IF REGISTRO.TITULAR LIKE ('NO') THEN
                DBMS_OUTPUT.PUT_LINE('EL DIRECTOR ' || REGISTRO.NOMBRE || ' ES UN INVITADO');
            ELSE
                DBMS_OUTPUT.PUT_LINE('EL DIRECTOR ' || REGISTRO.NOMBRE || ' ES TITULAR');
            END IF;
            FETCH C1 INTO REGISTRO;
        END LOOP;
        CLOSE C1;
    END;
    DECLARE 
    BEGIN
        OBRACOMPO();
    END;

    /* MOSTRAR TODAS LAS ORQUESTAS DE UNA TEMPORADA DADA */
    DROP PROCEDURE ESTACION
    CREATE OR REPLACE PROCEDURE ESTACION
    (V_ESTACION IN TORQUES.TEMPORADA%TYPE)
    AS
        CURSOR C1 IS
        SELECT *
        FROM TORQUES X
        WHERE X.TEMPORADA = V_ESTACION;
        REGISTRO C1%ROWTYPE;
    BEGIN
    OPEN C1;
    FETCH C1 INTO REGISTRO;
    WHILE(C1%FOUND) LOOP
        DBMS_OUTPUT.PUT_LINE(REGISTRO.NOMBRE||' '||REGISTRO.DIRECCION|| ' '||REGISTRO.TEMPORADA|| ' ' ||REGISTRO.FECIN);
        FETCH C1 INTO REGISTRO;
    END LOOP;
    CLOSE C1;
    END;
    SHOW ERRORS;
    DECLARE
    V_ESTACION TORQUES.TEMPORADA%TYPE := &V_ESTACION;
    BEGIN
        ESTACION(V_ESTACION);
    END;

    /* FUNCIONES */

    /*FUNCION QUE MUESTRA LA EDAD DE UN COMPOSITOR DADO*/
    DROP FUNCTION F_AGE;
    CREATE OR REPLACE FUNCTION F_AGE (V_COD TCOMPOS.NUMCOMP%TYPE)
    RETURN NUMBER
    AS
        V_YEARS NUMBER(3);
    BEGIN
        SELECT FLOOR((SYSDATE - TCOMPOS.FECNA)/365) INTO V_YEARS FROM TCOMPOS
        WHERE TCOMPOS.NUMCOMP = V_COD;
        RETURN V_YEARS;
    END F_AGE;

    DECLARE
    V_X NUMBER(3);
    V_COMPO TCOMPOS.NUMCOMP%TYPE :=&V_COMPO;
    V_ENAME TCOMPOS.NOMBRE%TYPE;
    BEGIN
    SELECT TCOMPOS.NOMBRE INTO V_ENAME FROM TCOMPOS WHERE TCOMPOS.NUMCOMP = V_COMPO;
    V_X:=F_AGE(V_COMPO);
    DBMS_OUTPUT.PUT_LINE('EL COMPOSITOR '|| V_ENAME || ' TIENE ' || V_X || ' AÃ‘OS');
    END;

    /* FUNCION QUE DADA UNA ORQUESTA DEVUELVE LA FECHA DE CREACION DE ESTA */
    CREATE OR REPLACE FUNCTION F_ORQDATE
    (V_CODORQ TORQUES.NUMORQ%TYPE)
    RETURN DATE
    AS
    V_DATE TORQUES.FECIN%TYPE;
    BEGIN
        SELECT TORQUES.FECIN INTO V_DATE FROM TORQUES
        WHERE TORQUES.NUMORQ = V_CODORQ;
        RETURN(V_DATE);        
    END F_ORQDATE;

    DECLARE
        V_CODORQ TORQUES.NUMORQ%TYPE:=&V_CODORQ;
        V_X TORQUES.FECIN%TYPE;
        V_ORQNAME TORQUES.NOMBRE%TYPE;
    BEGIN
        SELECT TORQUES.NOMBRE INTO V_ORQNAME FROM TORQUES
        WHERE TORQUES.NUMORQ = V_CODORQ;
        V_X:=F_ORQDATE(V_CODORQ);
        DBMS_OUTPUT.PUT_LINE('LA ORQUESTA ' || V_ORQNAME || ' SE FUNDO EL ' || V_X);
    END;

    /* PROCEDIMIENTO PARA A PARTIR DE DOS CODIGOS DE SOLISTA SABER CUAL ES EL MENOR DE LOS DOS */
    CREATE OR REPLACE FUNCTION F_SOLISTA
    (REGISTRO1 TSOLIS.NUMSOLIS%TYPE, REGISTRO2 TSOLIS.NUMSOLIS%TYPE)
    RETURN DATE
    AS
        V_X TSOLIS.FECNA%TYPE;
        V_Y TSOLIS.FECNA%TYPE;
    BEGIN
        SELECT X.FECNA,Y.FECNA INTO V_X,V_Y
        FROM TSOLIS X,TSOLIS Y
        WHERE X.NUMSOLIS = REGISTRO1 AND Y.NUMSOLIS = REGISTRO2;
            IF(V_X>V_Y) THEN
                RETURN V_X;
            ELSE IF(V_X<V_Y)THEN
                RETURN V_Y;
                END IF;
            END IF;
    END F_SOLISTA;


    DECLARE
    V_DATE TSOLIS.FECNA%TYPE;
    V_COD1 TSOLIS.NUMSOLIS%TYPE:=&V_COD1;
    V_COD2 TSOLIS.NUMSOLIS%TYPE:=&V_COD2;
    V_ENAME1 TSOLIS.NOMBRE%TYPE;
    V_ENAME2 TSOLIS.NOMBRE%TYPE;
    V_MENOR TSOLIS.NOMBRE%TYPE;
    BEGIN
        SELECT TSOLIS.NOMBRE INTO V_ENAME1 FROM TSOLIS
            WHERE TSOLIS.NUMSOLIS = V_COD1;
        SELECT TSOLIS.NOMBRE INTO V_ENAME2 FROM TSOLIS
            WHERE TSOLIS.NUMSOLIS = V_COD2;
        V_DATE:=F_SOLISTA(V_COD1,V_COD2);
        SELECT TSOLIS.NOMBRE INTO V_MENOR FROM  TSOLIS
            WHERE TSOLIS.NUMSOLIS = V_COD1 OR TSOLIS.NUMSOLIS = V_COD2 AND TSOLIS.FECNA = V_DATE;
        DBMS_OUTPUT.PUT_LINE('EL SOLISTA MAS JOVEN ENTRE '|| V_ENAME1 || ' Y ' || V_ENAME2 || ' ES ' || V_MENOR);
    END;

/* TRIGGERS */

/* TRIGGER PARA EVITAR QUE SE DESIGNE COMO TITULAR UN DIRECTOR Q ES INVITADO */
DROP TRIGGER T_NOTITULAR
CREATE OR REPLACE TRIGGER T_NOTITULAR
BEFORE INSERT ON TORQUES
FOR EACH ROW
DECLARE
    V_ESTADO TDIRECT.TITULAR%TYPE;
BEGIN
    SELECT TDIRECT.TITULAR INTO V_ESTADO
    FROM TDIRECT
    WHERE TDIRECT.NUMDIR =:NEW.NUMDIR;
    IF(V_ESTADO='NO') THEN
        RAISE_APPLICATION_ERROR(-20501,'IMPOSIBLE DESIGNAR DIRECTOR INVITADO COMO TITULAR');
    END IF;
END;
    /* PROBANDO TRIGGER */
    INSERT INTO TORQUES VALUES(20,1,'PROBANDO','PROBANDO','PROBANDO','10/JAN/01');
    /* OK */

    /* TRIGGER QUE IMPOSIBILITA QUE SE AGRUEGUE UNA FECHA DE NACIMIENTO MAYOR QUE LA FECHA ACTUAL */
    DROP TRIGGER T_NODATE
    CREATE OR REPLACE TRIGGER T_NODATE
    BEFORE INSERT ON TDIRECT
    FOR EACH ROW
    BEGIN
        IF(:NEW.FECNA>SYSDATE) THEN
            RAISE_APPLICATION_ERROR(-20502,'IMPOSIBLE INTRODUCIR UNA FECHA SUPERIOR A LA ACTUAL');
        END IF;
    END;
     /* PROBANDO TRIGGER */
        INSERT INTO TDIRECT VALUES(11,'PROBANDO','PROBANDO','18/MAY/2022','NO');
     /* OK */